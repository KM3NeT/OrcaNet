# Info for building a model with the ModelBuilder. This will produce a
# compiled keras model, with the input shape adapted to the input data given
# to the Organizer.
# Using this class to build a model is not required to use orca_train,
# as any model can be used for that.
#
# The model itself consists of a
# sequence of predefined layer blocks. E.g., the model might consist of convolutional
# layer blocks (convolution, BatchNorm, Activation, MaxPooling and/or Dropout),
# and end with a special last block, e.g. a flatten layer followed by some dense layer blocks,
# which produce a categorical output.
#
# Info for compiling the model is given in the section [compile]. This includes
# the used optimizer (e.g. adam) and the loss functions for each output
# of the network.

# ----------------------------------------------------------------------
[model]
# First, the default values for the layer blocks of the network. If a
# layer block has this parameter, its default is set to the given value
# (kwargs are not resolved).
#
# Type of the block to be added, mandatory for any block
# See orcanet/builder_util/layer_blocks.py for all available blocks, as well
# as their possible arguments.
type = "ConvBlock"
# Specifies the dimension of convolutional blocks, either 1, 2 or 3
conv_dim = 3
# Kernel size of the convolution.
kernel_size = 3
# Add a dropout layer with given rate.
dropout = 0.2
# Pool size of a MaxPooling layer, e.g. (1,1,2)
# pool_sizes = 2
# Activation function that should be used. e.g. 'linear', 'relu'...
activation = 'relu'
# Add a batch normalization layer
batchnorm=true
# l2 regularizer for the weights of the layer.
# kernel_l2_reg = 0.00001


# Then, the blocks in the body section of the resulting network.
# Each dict makes a new block. These will overwrite the default values from above.
blocks = [
    {filters=64},
    {filters=64},
    {filters=64, pool_size=[2, 2, 2]},
    {filters=64},
    {filters=64},
    {filters=64},
    {filters=128, pool_size=[2, 2, 2]},
    {filters=128},
    {filters=128},
    {filters=128, dropout=0.0},
    # This is the last layer of the network. In this case, its a special output block
    # called 'OutputReg. It has 3 dense layer blocks, followed by one dense layer
    # for each output_name.
    # Other (output) blocks are also available, see orcanet/builder_util/layer_blocks.py
    {type="OutputReg", output_name='direction_xyz', output_neurons=3}
]

# ----------------------------------------------------------------------
[compile]
# Options for the compilation of the network
# The optimizer to use for compiling, either 'adam' or 'sgd' for predefined
# orca optimizers, or keras:XXX for keras optimizers
optimizer = "adam"  # or e.g. keras:Adam
# Settings for the optimizer
epsilon=0.1

[compile.losses]
# The loss(es) of the model are listed here.
# Each entry is the name of the respective layer in the model, for which
# this loss is used. The value is a dict with the following keys:
# 'function': loss function to it will use
# 'metrics' : list of metrics to use (optional)
# 'weight' : weight for this loss, useful when using multiple outputs (optional)
direction_xyz = {function="mse", metrics=["mae",], weight=1.0}

